/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.giaodientulam.ui;

import com.mycompany.giaodientulam.dao.CategoryDao;
import com.mycompany.giaodientulam.dao.DrinkDao;
import com.mycompany.giaodientulam.entity.Bill;
import com.mycompany.giaodientulam.entity.Category;
import com.mycompany.giaodientulam.entity.Drink;
import com.mycompany.giaodientulam.entity.billDetail;
import com.mycompany.giaodientulam.impl.BillDetailDAOImpl;
import com.mycompany.giaodientulam.impl.CategoryDaoImpl;
import com.mycompany.giaodientulam.impl.DrinkDaoImpl;
import com.mycompany.giaodientulam.util.XDialog;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class DrinkJDialog extends javax.swing.JDialog implements DrinkC {

    /**
     * Creates new form LoaiDoUong
     */
    public DrinkJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
//        System.out.println("Row chọn: " + tblCategories.getSelectedRow());
//        System.out.println("Drinks size: " + drinks.size());
//    tblCategories.getSelectionModel().addListSelectionListener(e -> {
//        if (!e.getValueIsAdjusting()) {
//            fillDrinks(); // Gọi khi chọn xong dòng
//        }
//    });tblDrinks.addMouseListener(new java.awt.event.MouseAdapter() {
//    @Override
//    public void mouseClicked(java.awt.event.MouseEvent evt) {
//        if (evt.getClickCount() == 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
//            int row = tblDrinks.getSelectedRow();
//            if (row >= 0) {
//                selectDrink(row);
//            }
//        }
//    }
//});


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDrinks = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Loại đồ uống "
            }
        ));
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCategories);

        jScrollPane2.setToolTipText("");

        tblDrinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã", "Tên đồ uống", "Đơn giá", "Giảm giá"
            }
        ));
        tblDrinks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDrinksMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDrinks);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblDrinksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDrinksMouseClicked
        // TODO add your handling code here:
            if(evt.getClickCount() == 2){
            this.addDrinkToBill();
        }
    }//GEN-LAST:event_tblDrinksMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
                this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        // TODO add your handling code here:
         this.fillDrinks();
    }//GEN-LAST:event_tblCategoriesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrinkJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrinkJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrinkJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrinkJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                DrinkJDialog dialog = new DrinkJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTable tblDrinks;
    // End of variables declaration//GEN-END:variables

Bill bill;

List<Category> categories = List.of();
List<Drink> drinks = List.of();

@Override
public void open() {
    this.setLocationRelativeTo(null);
    this.fillCategories();
    this.fillDrinks();
}

@Override
public void fillCategories() {
//    CategoryDao categoryDao = new CategoryDaoImpl();
//    categories = categoryDao.findAll();
//    DefaultTableModel model = (DefaultTableModel) tblCategories.getModel();
//    model.setRowCount(0);
//    categories.forEach(d -> model.addRow(new Object[] {d.getName()}));
//    tblCategories.setRowSelectionInterval(0, 0);

    CategoryDao categoryDao = new CategoryDaoImpl();
    categories = categoryDao.findAll();
    
    DefaultTableModel model = (DefaultTableModel) tblCategories.getModel();
    model.setRowCount(0);
    categories.forEach(d -> model.addRow(new Object[] {d.getName()}));

    if (!categories.isEmpty()) {
        tblCategories.setRowSelectionInterval(0, 0); // chọn dòng đầu tiên
    }
}

@Override
public void fillDrinks() {
    Category category = categories.get(tblCategories.getSelectedRow());
    
    DrinkDao drinkDao = new DrinkDaoImpl();
    drinks = drinkDao.findByCategoryId(category.getId());

    DefaultTableModel model = (DefaultTableModel) tblDrinks.getModel();
    model.setRowCount(0);
    drinks.forEach(d -> {
        Object[] row = {
            d.getId(), 
            d.getName(), 
            String.format("$%.1f", d.getUnitPrice()), 
            String.format("%.0f%%", d.getDiscount()*100)
        };
        model.addRow(row);
    });

//    int row = tblCategories.getSelectedRow();
//    System.out.println("Row selected: " + row); // debug
//
//    if (row == -1 || row >= categories.size()) {
//        return; // Không có dòng nào được chọn hoặc vượt chỉ số
//    }
//
//    Category category = categories.get(row);
//    DrinkDao drinkDao = new DrinkDaoImpl();
//    drinks = drinkDao.findByCategoryId(category.getId());
//
//    System.out.println("Drinks size: " + drinks.size()); // debug
//
//    DefaultTableModel model = (DefaultTableModel) tblDrinks.getModel();
//    model.setRowCount(0);
//    drinks.forEach(d -> {
//        Object[] rowData = {
//            d.getId(), 
//            d.getName(), 
//            String.format("$%.1f", d.getUnitPrice()), 
//            String.format("%.0f%%", d.getDiscount() * 100)
//        };
//        model.addRow(rowData);
//    });
}

@Override
public void addDrinkToBill() {
    Drink drink = drinks.get(tblDrinks.getSelectedRow());
    
    String quantity = XDialog.prompt("Số lượng?");
    if(quantity != null && quantity.length() > 0){
        billDetail detail = new billDetail();
        detail.setBillid(bill.getId());
        detail.setDrinkId(drink.getId());
        detail.setUnitPrice(drink.getUnitPrice());
        detail.setDiscount(drink.getDiscount());
        detail.setQuantity(Integer.parseInt(quantity));
        
        new BillDetailDAOImpl().create(detail);
    }
}

    @Override
    public void setBill(Bill bill) {
         this.bill = bill;
    }
}